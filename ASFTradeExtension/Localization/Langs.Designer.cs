//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASFTradeExtension.Localization {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Langs {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Langs() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ASFTradeExtension.Localization.Langs", typeof(Langs).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无效 AppId.
        /// </summary>
        internal static string AppIdInvalid {
            get {
                return ResourceManager.GetString("AppIdInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 输入参数 AppIds 无效.
        /// </summary>
        internal static string ArgumentInvalidAppIds {
            get {
                return ResourceManager.GetString("ArgumentInvalidAppIds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数有误, 示例: -p 2 -l 20 (第二页, 每页20条).
        /// </summary>
        internal static string ArgumentInvalidFSL {
            get {
                return ResourceManager.GetString("ArgumentInvalidFSL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数无效, 示例 730 2 交易链接.
        /// </summary>
        internal static string ArgumentInvalidSCS {
            get {
                return ResourceManager.GetString("ArgumentInvalidSCS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на AppId 和 SetCount 必须大于0.
        /// </summary>
        internal static string ArgumentInvalidSCS2 {
            get {
                return ResourceManager.GetString("ArgumentInvalidSCS2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ASFEBridge 注册失败.
        /// </summary>
        internal static string ASFEnhanceRegisterFailed {
            get {
                return ResourceManager.GetString("ASFEnhanceRegisterFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ASFEBridge 注册成功.
        /// </summary>
        internal static string ASFEnhanceRegisterSuccess {
            get {
                return ResourceManager.GetString("ASFEnhanceRegisterSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 卡牌库存为空.
        /// </summary>
        internal static string CardInventoryIsEmpty {
            get {
                return ResourceManager.GetString("CardInventoryIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 响应为空.
        /// </summary>
        internal static string CartEmptyResponse {
            get {
                return ResourceManager.GetString("CartEmptyResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 旧的插件备份已经自动清理.
        /// </summary>
        internal static string CleanUpOldBackup {
            get {
                return ResourceManager.GetString("CleanUpOldBackup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 旧的插件备份清理失败.
        /// </summary>
        internal static string CleanUpOldBackupFailed {
            get {
                return ResourceManager.GetString("CleanUpOldBackupFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数无效 CSDELISTING [BotNames] [ClassId], 不指定 ClassId 时下架全部物品.
        /// </summary>
        internal static string CsDeListingItemArgsTips {
            get {
                return ResourceManager.GetString("CsDeListingItemArgsTips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数无效 CSMARKETHISTORY [BotNames] [ClassId] , 不指定 ClassId 时下架全部物品.
        /// </summary>
        internal static string CsMarketHistoryArgsTips {
            get {
                return ResourceManager.GetString("CsMarketHistoryArgsTips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}: 总计 {1}张, 每套 {2}张, 总计 {3}套 +{4}张, 可交易 {5}套 +{6}张.
        /// </summary>
        internal static string CurrentCardInventoryShow {
            get {
                return ResourceManager.GetString("CurrentCardInventoryShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на zh-Hans.
        /// </summary>
        internal static string CurrentLanguage {
            get {
                return ResourceManager.GetString("CurrentLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 成功下架了 {0} 个物品.
        /// </summary>
        internal static string DeListingSuccess {
            get {
                return ResourceManager.GetString("DeListingSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 完成.
        /// </summary>
        internal static string Done {
            get {
                return ResourceManager.GetString("Done", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 出错.
        /// </summary>
        internal static string Error {
            get {
                return ResourceManager.GetString("Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 尚未同意 EULA , 部分命令已禁用.
        /// </summary>
        internal static string EulaWarning {
            get {
                return ResourceManager.GetString("EulaWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 预计发送 {0} 套, 共 {1} 张 卡牌.
        /// </summary>
        internal static string ExpectToSendCardInfo {
            get {
                return ResourceManager.GetString("ExpectToSendCardInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 失败.
        /// </summary>
        internal static string Failure {
            get {
                return ResourceManager.GetString("Failure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 自动获取交易链接失败.
        /// </summary>
        internal static string FetchTradeLinkFailed {
            get {
                return ResourceManager.GetString("FetchTradeLinkFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无效 ClassId.
        /// </summary>
        internal static string InvalidClassId {
            get {
                return ResourceManager.GetString("InvalidClassId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 交易前库存状态:.
        /// </summary>
        internal static string InventoryStatusBeforeTrade {
            get {
                return ResourceManager.GetString("InventoryStatusBeforeTrade", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 共计 {0} 个物品上架 {1}.
        /// </summary>
        internal static string ItemListingSuccess {
            get {
                return ResourceManager.GetString("ItemListingSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 共计 {0} 个物品上架, 等待手动确认.
        /// </summary>
        internal static string ItemListSuccessWaitConfirm {
            get {
                return ResourceManager.GetString("ItemListSuccessWaitConfirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на ==========================================.
        /// </summary>
        internal static string Line {
            get {
                return ResourceManager.GetString("Line", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 网络异常, 读取库存信息失败.
        /// </summary>
        internal static string LoadInventoryFailedNetworkError {
            get {
                return ResourceManager.GetString("LoadInventoryFailedNetworkError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 多行结果:.
        /// </summary>
        internal static string MultipleLineResult {
            get {
                return ResourceManager.GetString("MultipleLineResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 网络错误.
        /// </summary>
        internal static string NetworkError {
            get {
                return ResourceManager.GetString("NetworkError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无卡牌.
        /// </summary>
        internal static string NoAvailableCards {
            get {
                return ResourceManager.GetString("NoAvailableCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 当前设置下无可显示的内容.
        /// </summary>
        internal static string NoAvailableItemToShow {
            get {
                return ResourceManager.GetString("NoAvailableItemToShow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无可用机器人.
        /// </summary>
        internal static string NoBotsAvailable {
            get {
                return ResourceManager.GetString("NoBotsAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无信息.
        /// </summary>
        internal static string NoInformation {
            get {
                return ResourceManager.GetString("NoInformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 过滤条件下无正在出售的CSGO物品.
        /// </summary>
        internal static string NoSelingCsItemInFilter {
            get {
                return ResourceManager.GetString("NoSelingCsItemInFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 无正在出售的CSGO物品.
        /// </summary>
        internal static string NoSellingCsItem {
            get {
                return ResourceManager.GetString("NoSellingCsItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 插件作者: Chr_, 联系方式: chr@chrxw.com.
        /// </summary>
        internal static string PluginContact {
            get {
                return ResourceManager.GetString("PluginContact", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 爱发电: https://afdian.net/@chr233.
        /// </summary>
        internal static string PluginInfo {
            get {
                return ResourceManager.GetString("PluginInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 推荐安装 ASFEnhance, 支持自动更新插件.
        /// </summary>
        internal static string PluginStandalongMode {
            get {
                return ResourceManager.GetString("PluginStandalongMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0} 版本 {1}.
        /// </summary>
        internal static string PluginVer {
            get {
                return ResourceManager.GetString("PluginVer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数无效 SELLCSITEM ClassId 数量 价格, 数量为-1时出售全部.
        /// </summary>
        internal static string SellCsItemArgsTips {
            get {
                return ResourceManager.GetString("SellCsItemArgsTips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 参数无效 SENDCSITEM [Bots] [ClassId] 发给每个Bot的数量, ClassId未指定时发送全部可交易物品, 否则只发送指定的物品.
        /// </summary>
        internal static string SendCsItemArgsTips {
            get {
                return ResourceManager.GetString("SendCsItemArgsTips", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 发送交易失败, AppId 可能无效.
        /// </summary>
        internal static string SendTradeFailedAppIdInvalid {
            get {
                return ResourceManager.GetString("SendTradeFailedAppIdInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 交易报价发送成功失败, 可交易卡牌数量不足.
        /// </summary>
        internal static string SendTradeFailedNoEnoughCards {
            get {
                return ResourceManager.GetString("SendTradeFailedNoEnoughCards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 发送交易报价 {0} -&gt; {1} 失败, 无可用物品.
        /// </summary>
        internal static string SendTradeFailedNoItemAvailable {
            get {
                return ResourceManager.GetString("SendTradeFailedNoItemAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 交易报价发送{0}.
        /// </summary>
        internal static string SendTradeResult {
            get {
                return ResourceManager.GetString("SendTradeResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 发送交易报价 {0} -&gt; {1}, 物品数量 {2}, {3}.
        /// </summary>
        internal static string SendTradeSuccess {
            get {
                return ResourceManager.GetString("SendTradeSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на SteamId 无效.
        /// </summary>
        internal static string SteamIdInvalid {
            get {
                return ResourceManager.GetString("SteamIdInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 成功.
        /// </summary>
        internal static string Success {
            get {
                return ResourceManager.GetString("Success", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на 2FA自动确认{0}.
        /// </summary>
        internal static string TFAConfirmResult {
            get {
                return ResourceManager.GetString("TFAConfirmResult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0} {1} 数量 {2}.
        /// </summary>
        internal static string ThreeItemWithNum {
            get {
                return ResourceManager.GetString("ThreeItemWithNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}: {1}.
        /// </summary>
        internal static string TwoItem {
            get {
                return ResourceManager.GetString("TwoItem", resourceCulture);
            }
        }
    }
}
